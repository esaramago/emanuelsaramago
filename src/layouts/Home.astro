---
import '../css/main.css'
import Layout from '../layouts/layout.astro'
import Card from '../components/Card.astro'
import Hero from '../components/Hero.astro'
import ButtonEmail from '../components/ButtonEmail.astro'

import { getLangFromUrl, useTranslations } from '../i18n/utils'
import { getProjects, getTechnologies, type Project } from '@/api'
import c from '../content'

import getImageUrl from '@/utils/getImageUrl'
import List from '@/components/List.astro'
import ListItem from '@/components/ListItem.astro'
import CardPricing from '@/components/CardPricing.astro'

const lang = getLangFromUrl(Astro.url)
const t: any = useTranslations(lang)

const projects = await getProjects()
const technologies = await getTechnologies()
const technologiesGroupedByType = groupBy(technologies, 'type')

---

<Layout>
  <Hero />
  <main>
    <section class="l-container l-container--full">
      <h2 class="c-h2">{ t('services').title }</h2>

      <div class="cards">
        {
          t('services').items.map((service: any) => (
            <Card tag={service.tag} title={service.title}>
              <p>{service.description}</p>
            </Card>
          ))
        }
      </div>

      <ButtonEmail />

    </section>

    <!-- Work -->
    <section class="l-container">
      <h2 class="c-h2">{ t('work').title }</h2>
      <div class="cards cards--wide">

        {projects.map((project: Project) => (
          <Card
            role={project.role}
            title={project.title}
            imageSrc={getImageUrl(project.image.asset._ref)}
          >
            <p set:html={project.description}></p>
            {
              project.url ? (
              <div>
                <a href={project.url} target="_blank">{project.url.replace('https://', '')}</a>
              </div>
              ) : ''
            }
          </Card>
        ))}
      </div>

      <ButtonEmail />
    </section>

    <!-- Pricing -->
    <section class="l-container">
      <h2 class="c-h2">{ t('pricing').title }</h2>
      <div class="cards">

        {
          t('pricing').levels.map((level: any) => (
            <CardPricing
              title={level.title}
              subTitle={level.description}
              price={level.price}
            >
              <List>
                {
                  level.features.map((feature: any) => (
                    <ListItem>{feature}</ListItem>
                  ))
                }
              </List>
            </CardPricing>
          ))
        }
      </div>
    </section>

    <!-- Brands -->
    <section class="l-container l-container--full">
      <h2 class="c-h2">{ t('brands').title }</h2>
      <ul class="l-row l-row--wrap">
        {
          c.brands.map((brand) => (
            <li>
              <img class="c-logo" src={`media/brands/${brand.logo}.svg`} alt={brand.name} title={brand.name} loading="lazy" />
            </li>
          ))
        }
        <li>
          { t('andmore') }
        </li>
      </ul>
    </section>

    <!-- Technologies -->
    <section class="l-container l-container--full">
      <h2 class="c-h2">{ t('technologies').title }</h2>

      <ul>
        {
          c.technologies.map((item: any) => (
            <li>
              <Card>
                <p>{item.description}</p>
              </Card>
            </li>
          ))
        }
      </ul>
      <ul class="l-row l-row--wrap">
        {
          c.technologies.map((tech) => (
            <li>
              <img class="c-logo" src={`media/technologies/${tech.logo}.svg`} alt={tech.name} title={tech.name} loading="lazy" />
            </li>
          ))
        }
        <li>
          { t('andmore') }
        </li>
      </ul>
    </section>

    <section class="l-container">
      <h2 class="c-h2">{ t('interested') }</h2>
      <div>
        <ButtonEmail />
      </div>
    </section>
  </main>
</Layout>

<style scoped>
.cards {
	--min: 36rem;
	display: grid;
	justify-content: center;
	gap: var(--sl-spacing-medium);
  width: 100%;
}
.cards--wide {
	--min: 100%;
}
@media (min-width: 980px) {
	.cards {
		grid-template-columns: repeat( auto-fit, minmax(var(--min), 1fr) );
	}
}
</style>